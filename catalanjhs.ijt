NB. Lab: Video - Generating the Catalan numbers
NB. 
NB.labchapter: 0 - Video Requirements

0 : 0
_______________________________________

To run this video lab, you must have 
access to youtube.com through the 
internet. 

If you do not, the lab will still 
advance through the exercises, but the 
videos will not be displayed.

Videos will appear as steps in the lab,
but you will need to click play on the video 
to get it started.

When you have viewed a video, select 
the line below the video and continue 
on as you would for any other lab.

This is required because when you are 
interacting with a video, you are not 
actually interacting with the J lab.

Also, this lab will define verbs that you
can use to explore the concepts. It will 
place these verbs in the Cat locale and 
add this to the path of your current locale.
In the case of name conflicts the verbs
may be accessed directly by adding _Cat_ to
the verb name. eg. catalan_Cat_ 
_______________________________________
)

NB.labchapter: 1 - Catalan numbers
NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/5p8--DMRO2U?feature=oembed;rel=0&amp;"></iframe>

NB.labprepare:set up Jqt display and define test and test 3

coinsert 'Cat' NB. Put Cat locale into copath of current locale

tester_Cat_=: 4 : 0  NB. Basis of catalan tester for string y of length 2 x
if. 2~:3!:0 y do.(LF,(":y),' is not a character string.',LF,'Try entering: test',(":x),' ''',(":y),'''',LF)return. end.
y=.y-.' ' NB. remove blanks in string 
if. -.*./ y e.'10' do.(LF,'''',y,''' should only contain ''0''s and ''1''s. No spaces.',LF)return. end. 
if. (+:x)>#y do. (LF,'''',y,''' needs ',(": t),' more character',((1<t=.(+:x)-#y){' s'),LF) return. end.
if. (+:x)<#y do. (LF,'''',y,''' needs ',(": t),' less character',((1<t=.(#y)-+:x){' s'),LF) return. end.
if. | t=.* +/r=.(+ _1* -. ) ". 1j1 # y do.(LF,'''',y,''' needs more ''',(":(0>t){ 0 1),'''s in string',LF) return. end. 
if. 0><./t=.+/\ r do.(LF,'''',y,''' breaks rule by having more ''0''s than ''1''s at position: ',(": t i. _1),LF)return. end. 
LF,'''',y, ''' is valid',LF
)

test3_Cat_=: 3 & tester  NB. test string of length 6 for Catalan validity

NB.labprepare:

0 : 0
_______________________________________

Now, see if you can find the five Catalan
strings with 3 one's and 3 zero's using test3.
_______________________________________
)


NB.labchapter: 2 - Other ways of finding Catalan strings

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/m5K1zWbyQCQ?feature=oembed;rel=0&amp;"></iframe>

NB.labprepare: define test4
test4_Cat_=: 4 & tester  NB. test string of length 8 for Catalan validity
NB.labprepare:

0 : 0
_______________________________________

Now, can you find the 14 Catalan strings
with 4 one's and 4 zero's using test4?
_______________________________________
)

NB.labchapter: 3 - What can Catalan strings represent?

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/IJkyzPHRiGY?feature=oembed;rel=0&amp;"></iframe>

NB.labprepare: define display environment and displays


cmb_Cat_=:#:@:i.@:(2&^)@:+:@:<: NB. creates the truth table for all combinations
r1_Cat_=:((-:@:# = +/)"_1 # ]) NB. removes those combinations where number of 1's ~: number of 0's - Rule 1
r2_Cat_=: ((_1&<:@: (<./)@:(+/\)@:(+ (_1 * -.))"_1) # ]) NB. removes those combinations where number of 0's > number of preceding 1's- Rule 2
cat_Cat_=: a:&$: : (<@: ({ ($~)`(1 0"_)`((1 , 0 ,~ ])"1 @: r2 @: r1 @: cmb)@.(2&<.))"0) NB. Handles 0 and 1 cases and trims others with the beginning 1 column and ending 0 column

NB. Verbs for lesson 4
parenthesis_Cat_=: 3 : 0
(i. catalan y) parenthesis y 
:
if. y=0 do. jhtml_jhs_ '<svg height="12" width="12"><rect x="1" y="1" width="10" height="10" stroke="grey" fill="grey" /></svg>' return. end. 
if. y=1 do. jhtml_jhs_ '<span style="font-weight:bold;letter-spacing:5px;font-size:30px;color:slategrey">(</span><span style="font-weight:bold;letter-spacing: 5px;font-size:30px;color:black">)</span>' return. end.
(x (<. <:@:catalan) y)([: jhtml_jhs_"1 (')(' {~ >@cat) rplc"1 ('(';'<span style="font-weight:bold;letter-spacing:5px;font-size:30px;color:slategrey">(</span>';')';'<span style="font-weight:bold;letter-spacing: 5px;font-size:30px;color:black">)</span>')"_)y
)
ballot_Cat_=:  3 : 0
(i. catalan y) ballot y 
: 
if. y=0 do. jhtml_jhs_ '<svg height="12" width="12"><rect x="1" y="1" width="10" height="10" stroke="grey" fill="grey" /></svg>' return. end. 
if. y=1 do. jhtml_jhs_ '<span style="letter-spacing:5px;font-size:30px;color:red">R</span><span style="letter-spacing: 5px;font-size:30px;color:blue">B</span>' return. end.
(x (<. <:@:catalan) y) ([: jhtml_jhs_"1 ('BR' {~ >@cat) rplc"1 ('R';'<span style="letter-spacing:5px;font-size:30px;color:red">R</span>';'B';'<span style="letter-spacing: 5px;font-size:30px;color:blue">B</span>')"_)y
)

binary_Cat_=: 3 : 0
(i. catalan y) binary y 
:
if. y=0 do. jhtml_jhs_ '<svg height="12" width="12"><rect x="1" y="1" width="10" height="10" stroke="grey" fill="grey" /></svg>' return. end. 
if. y=1 do. jhtml_jhs_ '<span style="font-weight:bold;letter-spacing:5px;font-size:30px;color:black">1</span><span style="font-weight:bold;letter-spacing: 5px;font-size:30px;color:red">0</span>' return. end.
(x (<. <:@:catalan) y)([: jhtml_jhs_"1 ('01' {~ >@cat) rplc"1 ('1';'<span style="font-weight:bold;letter-spacing:5px;font-size:30px;color:black">1</span>';'0';'<span style="font-weight:bold;letter-spacing: 5px;font-size:30px;color:red">0</span>')"_)y
)

ct_Cat_=:(+ (_1 * -.)) @>@cat
exf_Cat_=:i.@(#"1)@ct
wyf_Cat_=: ( (+/\"1 )@ct - >@cat)
frmt_Cat_=:,@:(];;@:(('<tspan class="','">',~[);'</tspan>';~]))

mount_Cat_=: 3 : 0
(i. catalan y) mount y
:
9!:7 '+++++++++|-' [ bx=. 9!: 6 ''
if. y=0 do. jhtml_jhs_"1 r rplc"1 ('black' frmt '|-+')[ r=.>< ;. _2 (9!:36 '') 5!:30 a: return. end.
if. y=1 do. jhtml_jhs_"1 r rplc"1 ('black' frmt '|-+'),('blue' frmt '/\'),('white' frmt ' ') [ r=.>< ;. _2 (9!:36 '') 5!:30<'/\' return. end.
t=.(' ' $~ catalan , ] , +:) y NB.(0,x) (' ' <@$~ (([: >./"1 >:@wyf) ,"0 +:@:] ))y
t=. (x (<. <:@:catalan) y){ <"_1 ('\/'{~ a: cat y)((a:([:<"1(i.@:catalan@],."0 _1 wyf_Cat_,"0 exf_Cat_))y))}"_ t
t=._6 ]\ |. each t
t=.>< ;. _2 (9!:36 '') 5!:30  t
9!:7 bx 
jhtml_jhs_"1 t rplc"1 ('black' frmt '|-+'),('blue' frmt '/\'),('white' frmt ' ')
)

multiply_Cat_=: 3 : 0
(i. catalan y) multiply y
:
if. y=0 do. jhtml_jhs_ '<svg height="12" width="12"><rect x="1" y="1" width="10" height="10" stroke="grey" fill="grey" /></svg>' return. end. 
if. y=1 do. jhtml_jhs_ '<span style="font-weight:bold;letter-spacing:5px;font-size:30px;color:red"><span style="color:black">(</span>a<span style="color:darkred;">*</span>b<span style="color:black">)</span></span>' return. end.
if. 9<y do. jhtml_jhs_ '<text x="15" y="50" class="pl" >9 is the maximum value for this display.</text>' return. end.
t=.({"_1 (')',.'abcdefghij'&({~ <:@:(+/\))))"1@:(1,.>@:cat) y
t=. mult"1 <"0 x{t
jhtml_jhs_"1 t 
)

mult_Cat_=: 3 : 0
while. 1<# p do.
 for_t. p do. if. t=<')' do. p=. t_index (((-&2)@:[ {. ]) , <@:(')',~'(',;@:(_2&+@[}.{.))   , (>:@:[ }. ])) p break.end. end.
end.
p=.(;p) rplc '(a';'(a*';'(b';'(b*';'(c';'(c*';'(d';'(d*';'(e';'(e*';'(f';'(f*';'(g';'(g*';'(h';'(h*';'(i';'(i*';'(j';'(j*';')c';')*c';')d';')*d';')e';')*e';')f';')*f';')g';')*g';')h';')*h';')i';')*i';')j';')*j'
p=. p rplc ')(';')*('
p=.p rplc '*';'<span style="color:darkred">*</span>';'(';'<span style="color:black">(</span>';')';'<span style="color:black">)</span>'
'<span style="font-weight:bold;letter-spacing:5px;font-size:30px;color:red">',p,'</span>'
)

path_Cat_=: 3 : 0
(i. catalan y) path y
:
if. y=0 do. jhtml_jhs_ '<svg height="12" width="12"><rect x="1" y="1" width="10" height="10" stroke="grey" fill="grey" /></svg>' return. end. 
if. y=1 do. t=. '<svg height="14" width="14"><rect x="2" y="2" width="10" height="10" stroke="grey" fill="none" />'
            t=. t,'<line x1="2" y1="12" x2="12" y2="2" stroke="red" />'
            jhtml_jhs_ t,'<path stroke="forestgreen" stroke-width="3" fill="none" d="M 1,13 v -11 h 11" /></svg>' return. end.
w=.('<svg height="',":@: ( (12 * >:)* >.@:((#x)<.8 %~ catalan)),'" width="',":@:(125 * <.&8),'">'"_)y NB. outside svg wrapper 8 grids per row
pos_base_=:pos=.(i. # x (<. <:@:catalan) y){ >@:({. ,@:{@:(1.2&*@:i.@:>.@:%&8 ; 1.2&*@:i.@:<.&8))@:catalan  y NB. upper left positions of grids
jhtml_jhs_"1 (w , ,&'</svg>') , pos paths (x (<. <:@:catalan) y) cat y
)
paths_Cat_=: 4 : 0"1 NB. aux to build grids N1 AUX N2 - N1 is x1 y1 - N2 is size of grid in rows=columns
'h w'=.x
n=. -: # y
t=.('<line x1="',":@:(xpos + (wid =. _10 + (10 * >:) ) ),'" y1="',(": ypos),'" x2="',":@:(xpos=.10 + 10 * *&w),'" y2="',":@:((ht=. _10 + (10 * >:))  + (ypos=.  10 * (h * >:) )),'" stroke="red" stroke-width="1.5" />'"_) n
t=. t,('<rect x="',(":xpos),'" y="',(":ypos),'" width="',(":wid),'" height="',(":ht),'" stroke="grey" fill="none" />'"_) n
t=. t,,('<line x1="',"1 (": xpos) ,"1 '" y1="',"1(": ypos + 10 * ,.@:i.),"1 '" x2="' ,"1 (": wid+xpos),"1 '" y2="',"1 (": ypos + 10 * ,.@:i.),"1'" stroke="gray"/>'"_) n
t=. t,,('<line x1="',"1 (": xpos + 10 * ,.@:i.) ,"1 '" y1="',"1(": ypos ),"1 '" x2="' ,"1 (": xpos + 10 * ,.@:i.),"1 '" y2="',"1 (": ypos + ht ),"1'" stroke="gray"/>'"_) n
t,,('<path stroke="forestgreen" stroke-width="4" fill="none" d="M ',":@:(xpos@:-:@:#),',', ":@:((ht + ypos) & -:@:#),((' h 10';' v -10');@:{~ ]),'" />'"_) y
)


polygon_Cat_=: 3 : 0
(i. catalan 8 <.y) polygon y
:
t=. 8 <. y
if. y=0 do. jhtml_jhs_ '<svg height="12" width="12"><rect x="1" y="1" width="10" height="10" stroke="grey" fill="grey" /></svg>' return. end. 
if. y=1 do. t=. '<svg height="48" width="50"><line x1="39.142" y1="39.142" x2="5.681" y2="30.176" stroke="red" />'
            t=. t,'<line x1="30.176" y1="5.681" x2="5.681" y2="30.176" stroke="red" />'
            jhtml_jhs_ t,'<line x1="39.142" y1="39.142" x2="30.176" y2="5.681" stroke="red" /></svg>' return. end.
pos_base_=:pos=.(i. # x (<. <:@:catalan) t){ >@:({. ,@:{@:(1.2&*@:i.@:>.@:%&10 ; 1.2&*@:i.@:<.&10))@:catalan  t NB. upper left positions of grids
vert_base_=:vertices=.(25 +|. pos* 40) (+"1"1 _) 20+.@:r.((o.%4)+ 2&% * o.@:i.)t+2
ed=. ,/ poly (1,. cat t) # inv"_1  (;"1) 2[\"1 <"1 vertices
w_base_=:w=.('<svg height="',":@: ( 48 * >.@:((#x)<.10 %~ catalan)),'" width="',":@:(125 * <.&10),'">'"_)t NB. outside svg wrapper 8 grids per row
jhtml_jhs_ (w , ,&'</svg>') , sv_base_=: ; ": each (<'<line x1="'),.(<"0 [ 1{"1 ed),. (<'" y1="'),.(<"0 {."1 ed),.(<'" x2="'),. (<"0 {:"1 ed),.(<'" y2="'),. ( _2{"1 ed);"0(<'" stroke-width="1" stroke="red" />')
)
poly_Cat_=: 3 : 0"_1
t=.y
p=.0
while. p<#t do.
if. */ p{t 
 do. p=.p+1 
 else. t=. ((_2{.p&{. ),(_2 }. p&{. ), ((2{. (p-2)&{),(_2{. (p-1)&{ )) , (p+1)&}.) t end.
 end.
 t
)
pexp_Cat_=: [: +/ ] <.@% [ ^ >: @ i. @ (<.@^.)
ple_Cat_=: p: @ i. @ (p: inverse) @ >:

catalan_Cat_=: 3 : 0
p=. ple +: y NB. the list of primes less than 2 * n
 e1=. p pexp"0 +: y NB. The exponents of primes of the numerator !2 * n
 e2=. p pexp"0 y NB. The exponents of primes of the denominator ! n
 e3=. p pexp"0 >: y NB. The exponents of primes of the denominator ! >: n
*/  p ^ x: e1-e2+e3 NB. Add and subtract exponents then restore to their true values and multiply for the answer.
)

NB.labprepare:

0 : 0
_______________________________________

Look at these different views of Catalan strings using:

binary n
parenthesis n
ballot n
multiply n
path n
polygon n
mount n

where n can be any integer up to about 7
although some can go higher.
_______________________________________
)

NB.labchapter: 4 - How long would it take if we counted strings?

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/jtfl7Z7gX5M?feature=oembed;rel=0&amp;"></iframe>
NB.labprepare:build firstcat_Cat_
firstcat_Cat_=: (1:`1:`#@.(2<.#@$))@>@cat
NB.labprepare:

0 : 0
_______________________________________

firstcat is not recommended as a way to
create Catalan numbers, but try out a couple 
values anyway.

firstcat 6

If you want to get a sense of the time and
space then run
timespacex 'firstcat n'
where n is any number up to about 10
depending on how long you want to wait.
_______________________________________
)

NB.labchapter: 5 - Explaining the numerator of the Catalan formula

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/CiOeRVN_bZk?feature=oembed;rel=0&amp;"></iframe>
NB.labprepare:build explode_Cat_
explode_Cat_=:  (! +:)@:x:
NB.labprepare:

0 : 0
_______________________________________

explode is a verb that works pretty 
quick but the results grow pretty quick 
as well. See if you can make things go
pop.

explode 45
_______________________________________
)

NB.labchapter: 6 - Explaining the denominator of the Catalan formula

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/WlTImA01gHM?feature=oembed;rel=0&amp;"></iframe>
NB.labprepare:build kitty_Cat_
kitty_Cat_=: (! +:) % >:
NB.labprepare:

0 : 0
_______________________________________

kitty is a verb that will calculate
catalan numbers up to a point. It won't
get you all the way to a million, but it
can do numbers you wouldn't want to do
by hand.

kitty 11
_______________________________________
)
NB.labchapter: 7 - Extending the accuracy of our Catalan formula

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/vmEAy9beo6U?feature=oembed;rel=0&amp;"></iframe>
NB.labprepare:build kittyX_Cat_
kittyX_Cat_=:  kitty @ x:
NB.labprepare:

0 : 0
_______________________________________

In order to get the precision that we
require we use the Extended monadic verb (x:)
to change kitty into kittyX

kitty 45
kittyX 45
_______________________________________
)
NB.labchapter: 8 - Logarithms - one of our secret weapons

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/yWKG-whuQMU?feature=oembed;rel=0&amp;"></iframe>

0 : 0
_______________________________________

Power (^) and Logarithm (^.) are built in to J
as primitive dyadic verbs which means that
you access them directly from their symbols.

Power  5 ^ 3
Logarithm   3 ^. 81
_______________________________________
)
NB.labchapter: 9 - Finding the Prime Factors of a number

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/oS6SL65NZFs?feature=oembed;rel=0&amp;"></iframe>

0 : 0
_______________________________________

Prime Factors (q:) is a primitve monadic
verb that returns the prime factors of a 
given integer.

Prime Factors q: 45
_______________________________________
)
NB.labchapter: 10 - Using Prime Factors to simplify calculations

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/oS6SL65NZFs?feature=oembed;rel=0&amp;"></iframe>

0 : 0
_______________________________________

You can play with Power (^) and Logarithm (^.)
to show how multiplication is the same as 
adding logarithms and division is the same as 
subtracting logarithms.

81 * 20
(3 ^. 81) + (3 ^. 20)
3 ^ (3 ^. 81) + (3 ^. 20)
_______________________________________
)
NB.labchapter: 11 - Finding the primes less than a given integer

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/MNDnVp-AplA?feature=oembed;rel=0&amp;"></iframe>
NB.labprepare:build ple_Cat_
ple_Cat_=: i. &. (p: inverse)
NB.labprepare:

0 : 0
_______________________________________

ple is a defined verb that returns a list
of primes less than the given integer.

ple =: i. &. (p: inverse)

ple 45
_______________________________________
)
NB.labchapter: 12 - Finding the exponents of the primes in the factorial of a given integer

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/bBlINpzzUCA?feature=oembed;rel=0&amp;"></iframe>
NB.labprepare:build pexp_Cat_
pexp_Cat_=:  [: +/ ] <.@% [ ^ >: @ i. @ (<.@^.)
NB.labprepare:

0 : 0
_______________________________________

pexp is a defined verb that returns the
number of times a prime occurs in the 
factorial of a given integer.

pexp =:  [: +/ ] <.@% [ ^ >: @ i. @ (<.@^.)

3 pexp 45
_______________________________________
)
NB.labchapter: 13 - Finding the millionth Catalan number

NB.labhtml:<iframe width="800" height="450" src="https://www.youtube.com/embed/ez2OkKU6MxY?feature=oembed;rel=0&amp;"></iframe>
NB.labprepare:build catalan_Cat_ and kittyN_Cat_
catalan=: 3 : 0
p=. ple +: y NB. the list of primes less than 2 * n
 e1=. p pexp"0 +: y NB. The exponents of primes of the numerator !2 * n
 e2=. p pexp"0 y NB. The exponents of primes of the denominator ! n
 e3=. p pexp"0 >: y NB. The exponents of primes of the denominator ! >: n
*/  p ^ x: e1-e2+e3 NB. Add and subtract exponents then restore to their true values and multiply for the answer.
)
kittyN_Cat_=:  #@:":@: catalan_Cat_
NB.labprepare:

0 : 0
_______________________________________

catalan will return the catalan number for
a given integer up to very large numbers, but
it may be more effective to display the number
of integers in the number to avoid too many
pages required to display the Catalan number
by using kittyN. 

kittyN 50000

_______________________________________
)

0 : 0
_______________________________________

You can use kittyN to try to find the 
number of digits in the millionth catalan 
number if you would like. This may 
take a few minutes to calculate.

kittyN 1000000

_______________________________________
)
NB.labchapter: 14 - References

0 : 0
_______________________________________


Professor Koo-Guan Choo 
Senior Lecturer in the School of Mathematics and Statistics at the University of Sydney
http://www.maths.usyd.edu.au/u/kooc/catalan.html

Josef Rukavicka
On Generalized Dyck Paths 
http://www.emis.de/journals/EJC/ Volume_18/PDF/v18i1p40.pdf
 _______________________________________
)


